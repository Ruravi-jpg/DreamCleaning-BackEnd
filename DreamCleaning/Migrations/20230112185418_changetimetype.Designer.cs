// <auto-generated />
using System;
using System.Collections.Generic;
using DC.WebApi.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DC.WebApi.Migrations
{
    [DbContext(typeof(DCDbContext))]
    [Migration("20230112185418_changetimetype")]
    partial class changetimetype
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.EmployeeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefStreet1")
                        .HasColumnType("text");

                    b.Property<string>("RefStreet2")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("Name", "LastName")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BtwnStreet1")
                        .HasColumnType("text");

                    b.Property<string>("BtwnStreet2")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<float>("CostService")
                        .HasColumnType("real");

                    b.Property<float>("HoursService")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("ReferencePhotosList")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsActive = true,
                            Password = new byte[] { 102, 153, 22, 241, 83, 5, 108, 206, 120, 218, 60, 4, 50, 193, 214, 83, 145, 218, 175, 100, 47, 144, 151, 147, 83, 252, 211, 221, 20, 231, 171, 70, 114, 241, 84, 147, 134, 50, 57, 159, 158, 93, 11, 236, 236, 88, 53, 223, 35, 42, 34, 61, 153, 119, 157, 205, 40, 146, 188, 148, 115, 41, 41, 163, 239, 128, 94, 122, 65, 48, 251, 236, 50, 165, 36, 254, 93, 49, 87, 178, 21, 75, 139, 121, 130, 90, 8, 166, 187, 48, 211, 108, 148, 59, 41, 81, 244, 241, 83, 194, 195, 103, 10, 249, 175, 38, 208, 56, 14, 36, 138, 244, 144, 152, 173, 124, 203, 105, 13, 242, 92, 102, 234, 4, 91, 188, 146, 202, 169, 215, 170, 101, 174, 177, 216, 151, 118, 129, 48, 221, 212, 191, 112, 204, 0, 228, 160, 132, 155, 178, 129, 72, 177, 71, 189, 72, 194, 131, 58, 220, 226, 152, 190, 78, 2, 156, 222, 134, 1, 39, 181, 91, 81, 144, 22, 228, 46, 53, 47, 228, 238, 64, 223, 190, 187, 97, 16, 114, 50, 27, 136, 255, 31, 162, 241, 16, 112, 183, 36, 41, 199, 196, 36, 166, 14, 92, 232, 233, 193, 250, 253, 48, 5, 219, 79, 191, 0, 233, 254, 83, 58, 176, 118, 227, 226, 113, 95, 16, 139, 121, 194, 140, 107, 123, 150, 68, 244, 125, 254, 183, 124, 195, 109, 168, 225, 162, 226, 39, 193, 58, 92, 63, 92, 19, 121, 162 },
                            Role = "SuperAdmin",
                            Salt = new byte[] { 247, 35, 128, 135, 131, 251, 165, 38, 96, 63, 150, 22, 186, 205, 162, 63, 160, 228, 13, 91, 178, 192, 42, 128, 11, 8, 250, 7, 230, 35, 72, 74, 13, 96, 105, 102, 113, 139, 185, 49, 193, 102, 194, 106, 103, 220, 166, 250, 156, 162, 1, 48, 210, 166, 29, 196, 166, 199, 55, 38, 216, 19, 136, 191, 112, 91, 113, 193, 25, 46, 92, 123, 27, 253, 199, 255, 166, 172, 122, 63, 131, 108, 76, 138, 191, 5, 73, 33, 46, 173, 51, 238, 116, 40, 126, 184, 150, 37, 204, 209, 243, 84, 241, 101, 45, 196, 136, 52, 231, 230, 249, 97, 81, 231, 142, 4, 13, 174, 100, 226, 172, 79, 67, 107, 20, 178, 216, 57 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.WorkUnitEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DayToWork")
                        .HasColumnType("integer");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly>("FinishTime")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("WorkUnits");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("DC.WebApi.Core.Data.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.WorkUnitEntity", b =>
                {
                    b.HasOne("DC.WebApi.Core.Data.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DC.WebApi.Core.Data.Entities.PropertyEntity", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Property");
                });
#pragma warning restore 612, 618
        }
    }
}
