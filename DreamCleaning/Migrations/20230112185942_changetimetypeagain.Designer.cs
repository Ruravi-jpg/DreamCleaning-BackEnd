// <auto-generated />
using System;
using System.Collections.Generic;
using DC.WebApi.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DC.WebApi.Migrations
{
    [DbContext(typeof(DCDbContext))]
    [Migration("20230112185942_changetimetypeagain")]
    partial class changetimetypeagain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.EmployeeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefStreet1")
                        .HasColumnType("text");

                    b.Property<string>("RefStreet2")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("Name", "LastName")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BtwnStreet1")
                        .HasColumnType("text");

                    b.Property<string>("BtwnStreet2")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<float>("CostService")
                        .HasColumnType("real");

                    b.Property<float>("HoursService")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("ReferencePhotosList")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsActive = true,
                            Password = new byte[] { 120, 161, 167, 12, 132, 12, 219, 91, 70, 46, 141, 217, 206, 101, 68, 184, 52, 230, 58, 121, 60, 193, 192, 203, 90, 218, 6, 255, 157, 22, 75, 50, 241, 13, 112, 69, 20, 242, 11, 102, 146, 88, 114, 147, 30, 213, 168, 2, 113, 128, 62, 233, 116, 28, 148, 148, 16, 95, 186, 33, 67, 46, 218, 165, 217, 201, 18, 54, 139, 61, 196, 71, 126, 141, 178, 132, 211, 127, 56, 210, 122, 106, 250, 217, 159, 111, 211, 194, 100, 202, 97, 81, 140, 35, 65, 235, 150, 253, 167, 251, 148, 138, 150, 85, 226, 132, 163, 224, 243, 115, 247, 98, 64, 182, 254, 14, 222, 228, 17, 138, 47, 168, 41, 79, 199, 131, 172, 171, 108, 1, 211, 89, 43, 34, 176, 59, 179, 201, 226, 185, 53, 118, 132, 207, 206, 224, 13, 99, 217, 35, 67, 195, 137, 72, 34, 83, 194, 158, 151, 235, 239, 15, 107, 87, 66, 183, 25, 253, 231, 255, 54, 188, 213, 24, 187, 213, 179, 245, 228, 43, 108, 162, 24, 0, 78, 30, 208, 56, 177, 149, 43, 79, 40, 80, 9, 206, 102, 80, 122, 170, 108, 128, 99, 22, 51, 127, 139, 88, 141, 182, 32, 131, 179, 212, 222, 32, 62, 237, 205, 206, 255, 216, 9, 168, 220, 82, 160, 185, 179, 192, 29, 124, 53, 167, 235, 83, 25, 130, 247, 184, 123, 35, 255, 91, 114, 167, 27, 202, 209, 129, 146, 53, 173, 175, 225, 235 },
                            Role = "SuperAdmin",
                            Salt = new byte[] { 162, 242, 10, 104, 97, 24, 10, 181, 201, 246, 161, 140, 211, 186, 138, 143, 108, 130, 221, 38, 196, 161, 129, 2, 246, 167, 120, 60, 192, 162, 225, 210, 228, 151, 183, 84, 244, 129, 94, 39, 123, 140, 78, 87, 77, 30, 118, 107, 81, 66, 210, 127, 48, 112, 154, 19, 194, 34, 171, 88, 63, 22, 169, 139, 218, 103, 52, 74, 139, 128, 30, 187, 4, 226, 20, 128, 60, 107, 244, 179, 107, 130, 247, 201, 95, 68, 125, 154, 120, 4, 151, 45, 52, 142, 255, 217, 209, 2, 44, 3, 237, 183, 251, 62, 2, 183, 190, 223, 132, 15, 94, 49, 44, 132, 123, 55, 6, 134, 191, 200, 221, 31, 154, 129, 237, 32, 33, 207 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.WorkUnitEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DayToWork")
                        .HasColumnType("integer");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("FinishTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("WorkUnits");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("DC.WebApi.Core.Data.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.WorkUnitEntity", b =>
                {
                    b.HasOne("DC.WebApi.Core.Data.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DC.WebApi.Core.Data.Entities.PropertyEntity", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Property");
                });
#pragma warning restore 612, 618
        }
    }
}
