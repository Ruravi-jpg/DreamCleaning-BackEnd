// <auto-generated />
using System;
using System.Collections.Generic;
using DC.WebApi.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DC.WebApi.Migrations
{
    [DbContext(typeof(DCDbContext))]
    [Migration("20221103005814_changeHoursServicetype")]
    partial class changeHoursServicetype
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.EmployeeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefStreet1")
                        .HasColumnType("text");

                    b.Property<string>("RefStreet2")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("Name", "LastName")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.PropertyEmployeeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyEmployeeEntity");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BtwnStreet1")
                        .HasColumnType("text");

                    b.Property<string>("BtwnStreet2")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<float>("CostService")
                        .HasColumnType("real");

                    b.Property<float>("HoursService")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("ReferencePhotosList")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsActive = true,
                            Password = new byte[] { 50, 99, 100, 12, 117, 142, 80, 244, 110, 141, 76, 88, 19, 168, 141, 86, 228, 82, 117, 1, 7, 0, 19, 0, 142, 19, 231, 100, 18, 82, 199, 51, 40, 8, 206, 204, 63, 140, 100, 108, 151, 247, 44, 45, 174, 158, 50, 4, 130, 6, 235, 20, 116, 83, 149, 140, 16, 225, 166, 27, 155, 99, 234, 152, 155, 168, 37, 12, 24, 239, 73, 140, 163, 71, 177, 23, 207, 186, 82, 221, 177, 7, 16, 216, 254, 163, 191, 237, 232, 51, 171, 194, 225, 116, 121, 67, 111, 48, 3, 124, 121, 232, 235, 124, 144, 8, 239, 167, 110, 133, 136, 56, 233, 217, 101, 147, 45, 184, 232, 190, 128, 189, 246, 65, 248, 105, 51, 202, 98, 59, 173, 154, 55, 94, 80, 205, 219, 59, 145, 175, 60, 50, 85, 117, 81, 158, 162, 37, 159, 233, 57, 74, 217, 74, 83, 58, 202, 218, 228, 79, 55, 60, 39, 233, 165, 111, 229, 82, 178, 3, 95, 51, 80, 91, 135, 146, 144, 192, 148, 219, 127, 192, 141, 161, 172, 240, 191, 215, 222, 34, 149, 9, 109, 95, 164, 72, 203, 199, 124, 191, 51, 108, 229, 111, 59, 159, 131, 93, 89, 94, 158, 212, 132, 6, 112, 86, 107, 198, 247, 216, 105, 246, 65, 114, 227, 59, 127, 97, 205, 98, 60, 43, 17, 139, 95, 84, 176, 179, 109, 71, 125, 153, 90, 135, 44, 127, 146, 61, 85, 12, 170, 28, 87, 118, 90, 214 },
                            Role = "SuperAdmin",
                            Salt = new byte[] { 234, 212, 145, 226, 173, 110, 133, 97, 210, 48, 134, 189, 200, 6, 245, 58, 165, 232, 9, 249, 34, 236, 11, 230, 40, 125, 18, 200, 101, 153, 235, 222, 62, 102, 231, 36, 29, 220, 73, 4, 14, 47, 26, 135, 3, 93, 111, 250, 33, 25, 117, 81, 144, 175, 2, 136, 184, 200, 155, 38, 13, 89, 193, 224, 180, 34, 252, 94, 35, 161, 196, 81, 134, 237, 60, 249, 36, 5, 229, 218, 133, 32, 48, 124, 45, 125, 249, 189, 77, 148, 96, 255, 88, 250, 232, 150, 141, 99, 49, 122, 11, 210, 236, 108, 157, 81, 8, 149, 108, 14, 117, 207, 235, 72, 163, 203, 131, 117, 72, 31, 195, 18, 33, 90, 100, 120, 90, 58 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("DC.WebApi.Core.Data.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.PropertyEmployeeEntity", b =>
                {
                    b.HasOne("DC.WebApi.Core.Data.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DC.WebApi.Core.Data.Entities.PropertyEntity", "Property")
                        .WithMany("PropertyEmployees")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.PropertyEntity", b =>
                {
                    b.Navigation("PropertyEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
