// <auto-generated />
using System;
using System.Collections.Generic;
using DC.WebApi.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DC.WebApi.Migrations
{
    [DbContext(typeof(DCDbContext))]
    [Migration("20230113162335_kk")]
    partial class kk
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.EmployeeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefStreet1")
                        .HasColumnType("text");

                    b.Property<string>("RefStreet2")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("Name", "LastName")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BtwnStreet1")
                        .HasColumnType("text");

                    b.Property<string>("BtwnStreet2")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<float>("CostService")
                        .HasColumnType("real");

                    b.Property<float>("HoursService")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("ReferencePhotosList")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsActive = true,
                            Password = new byte[] { 63, 181, 67, 48, 175, 105, 112, 62, 184, 32, 104, 89, 232, 180, 205, 64, 248, 30, 55, 18, 35, 226, 134, 108, 219, 119, 154, 24, 245, 139, 156, 245, 56, 62, 54, 61, 129, 242, 196, 171, 148, 17, 121, 93, 90, 154, 176, 246, 231, 230, 116, 71, 43, 81, 231, 190, 228, 40, 246, 241, 251, 189, 225, 30, 190, 26, 27, 246, 209, 244, 139, 15, 107, 129, 151, 89, 194, 159, 131, 175, 34, 182, 47, 45, 36, 131, 180, 82, 127, 167, 5, 174, 157, 126, 52, 118, 246, 71, 167, 141, 173, 113, 59, 146, 207, 184, 75, 120, 6, 98, 53, 211, 173, 20, 5, 165, 81, 51, 63, 172, 41, 207, 138, 159, 198, 42, 133, 211, 229, 48, 197, 245, 110, 96, 174, 102, 119, 71, 55, 150, 4, 144, 13, 21, 55, 176, 167, 242, 121, 69, 232, 26, 234, 45, 116, 245, 202, 69, 124, 32, 16, 165, 206, 231, 232, 189, 34, 119, 230, 244, 177, 70, 75, 104, 237, 131, 121, 132, 69, 247, 36, 50, 23, 82, 172, 21, 33, 71, 171, 188, 97, 0, 218, 162, 12, 67, 2, 150, 78, 110, 154, 119, 255, 207, 129, 160, 205, 153, 140, 47, 64, 216, 210, 180, 144, 194, 71, 104, 56, 142, 198, 134, 3, 165, 161, 161, 114, 50, 123, 8, 214, 135, 194, 201, 13, 186, 250, 212, 160, 153, 120, 42, 72, 0, 143, 200, 210, 110, 171, 182, 101, 211, 90, 235, 252, 245 },
                            Role = "SuperAdmin",
                            Salt = new byte[] { 41, 254, 84, 189, 180, 164, 81, 98, 207, 74, 226, 190, 119, 202, 251, 211, 24, 225, 172, 49, 112, 230, 118, 109, 175, 93, 69, 156, 173, 185, 69, 161, 217, 128, 212, 108, 159, 53, 78, 251, 79, 19, 167, 72, 11, 64, 199, 253, 124, 192, 147, 224, 84, 96, 174, 191, 66, 42, 178, 16, 176, 86, 79, 226, 118, 9, 121, 234, 181, 53, 163, 48, 75, 169, 222, 109, 68, 211, 187, 229, 119, 52, 168, 134, 198, 198, 4, 214, 88, 160, 183, 86, 31, 32, 112, 103, 229, 34, 187, 142, 29, 228, 96, 3, 173, 8, 205, 41, 6, 229, 11, 67, 179, 215, 209, 147, 115, 112, 99, 98, 111, 38, 182, 151, 41, 71, 71, 125 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.WorkUnitEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DayToWork")
                        .HasColumnType("integer");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("FinishTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long?>("PropertyEntityId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PropertyEntityId");

                    b.ToTable("WorkUnits");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("DC.WebApi.Core.Data.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.WorkUnitEntity", b =>
                {
                    b.HasOne("DC.WebApi.Core.Data.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DC.WebApi.Core.Data.Entities.PropertyEntity", null)
                        .WithMany("WorkList")
                        .HasForeignKey("PropertyEntityId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.PropertyEntity", b =>
                {
                    b.Navigation("WorkList");
                });
#pragma warning restore 612, 618
        }
    }
}
