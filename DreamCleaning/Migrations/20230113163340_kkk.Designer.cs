// <auto-generated />
using System;
using System.Collections.Generic;
using DC.WebApi.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DC.WebApi.Migrations
{
    [DbContext(typeof(DCDbContext))]
    [Migration("20230113163340_kkk")]
    partial class kkk
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.EmployeeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefStreet1")
                        .HasColumnType("text");

                    b.Property<string>("RefStreet2")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("Name", "LastName")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.PropertyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BtwnStreet1")
                        .HasColumnType("text");

                    b.Property<string>("BtwnStreet2")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<float>("CostService")
                        .HasColumnType("real");

                    b.Property<float>("HoursService")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("ReferencePhotosList")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsActive = true,
                            Password = new byte[] { 56, 73, 254, 157, 25, 151, 247, 106, 38, 104, 223, 21, 224, 240, 23, 116, 67, 17, 231, 70, 28, 156, 77, 60, 136, 121, 152, 244, 150, 220, 105, 84, 219, 14, 15, 244, 110, 188, 195, 181, 88, 81, 159, 170, 194, 171, 179, 21, 208, 49, 99, 117, 118, 169, 222, 51, 93, 156, 141, 47, 82, 133, 163, 200, 69, 208, 137, 137, 139, 71, 178, 97, 55, 29, 5, 196, 88, 238, 142, 7, 146, 160, 1, 122, 67, 102, 44, 13, 184, 229, 35, 207, 9, 159, 81, 136, 194, 109, 39, 22, 133, 60, 98, 128, 72, 152, 139, 237, 30, 63, 205, 189, 162, 172, 179, 125, 144, 112, 75, 9, 1, 34, 198, 211, 220, 168, 61, 160, 120, 3, 62, 170, 214, 155, 237, 181, 75, 214, 243, 56, 67, 164, 32, 238, 11, 183, 123, 110, 226, 64, 87, 38, 238, 0, 239, 67, 240, 186, 122, 146, 34, 205, 175, 7, 151, 82, 146, 222, 99, 148, 148, 13, 204, 14, 253, 131, 210, 116, 60, 178, 114, 135, 59, 234, 218, 142, 23, 171, 206, 118, 103, 165, 233, 132, 103, 86, 22, 61, 98, 6, 188, 120, 243, 15, 178, 140, 231, 232, 231, 225, 150, 225, 20, 36, 76, 197, 124, 54, 119, 21, 34, 103, 42, 161, 166, 242, 118, 122, 0, 102, 161, 69, 39, 48, 232, 54, 220, 3, 239, 170, 177, 66, 232, 91, 205, 195, 149, 36, 115, 87, 107, 95, 148, 217, 33, 54 },
                            Role = "SuperAdmin",
                            Salt = new byte[] { 153, 109, 45, 4, 130, 126, 204, 82, 166, 49, 131, 50, 8, 205, 89, 29, 123, 157, 233, 221, 169, 231, 39, 239, 196, 40, 198, 29, 83, 89, 69, 215, 158, 40, 211, 186, 41, 215, 68, 117, 243, 109, 155, 122, 225, 72, 107, 90, 74, 84, 170, 48, 93, 5, 62, 49, 208, 177, 109, 25, 189, 67, 75, 60, 47, 252, 164, 143, 83, 43, 106, 245, 187, 147, 75, 91, 204, 254, 177, 126, 105, 15, 213, 169, 97, 17, 34, 31, 72, 242, 157, 90, 23, 55, 119, 90, 108, 76, 130, 122, 114, 193, 44, 140, 10, 215, 145, 51, 188, 85, 20, 75, 163, 202, 14, 116, 151, 216, 205, 2, 108, 60, 117, 83, 22, 155, 60, 7 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.WorkUnitEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DayToWork")
                        .HasColumnType("integer");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("FinishTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long?>("PropertyParentId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PropertyParentId");

                    b.ToTable("WorkUnits");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("DC.WebApi.Core.Data.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.WorkUnitEntity", b =>
                {
                    b.HasOne("DC.WebApi.Core.Data.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DC.WebApi.Core.Data.Entities.PropertyEntity", "PropertyParent")
                        .WithMany("WorkList")
                        .HasForeignKey("PropertyParentId");

                    b.Navigation("Employee");

                    b.Navigation("PropertyParent");
                });

            modelBuilder.Entity("DC.WebApi.Core.Data.Entities.PropertyEntity", b =>
                {
                    b.Navigation("WorkList");
                });
#pragma warning restore 612, 618
        }
    }
}
